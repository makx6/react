{"version":3,"sources":["components/wrap.js","components/button.js","components/modal.js","components/task.js","App.js","serviceWorker.js","index.js"],"names":["Wrap","state","bool","react_default","a","createElement","className","style","opacity","this","props","vision","contents","Component","Button","id","ident","onClick","onPress","classNames","value","ModalWindow","change","chang","valu","val","name","func","display","width","height","paddingBottom","components_button","placeholder","onChange","Task","butBool","clickOnTask","e","_this","setState","succes","_this2","identy","number","taskName","Fragment","taskDesk","App","see","value1","modalShow","click","target","tagName","push","handleChange","handleChange1","map","item","key","task","modal","wrap","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66de1e7b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Wrap extends Component {\n\n  state = {\n    bool: true\n  }\n\n\n  render(){\n    return(\n      <div className=\"wrap\" style={{opacity: this.props.vision ? '0' : '1'}}>\n        <div className=\"wrap-header all-center\">\n          <h1>TO DO</h1>\n        </div>\n        <div className=\"container-for-tasks\">\n          {this.props.contents}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Wrap;","import React, {Component} from 'react';\n\nclass Button extends Component {\n\n  render(){\n    return(\n      <button id={this.props.ident} onClick={this.props.onPress} className={this.props.classNames}>{this.props.value}</button>\n    )\n  }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Button from './button'\n\nclass ModalWindow extends Component {\n\n  render(){\n    return(\n      <div change={this.props.change} chang={this.props.chang} valu={this.props.valu} val={this.props.val} name={this.props.func} className='all-center' style={{display: this.props.vision ? 'none' : 'flex',width: '100%',height: '100vh', paddingBottom: '130px'}}>\n        <div className=\"modal-block\" style={{opacity: this.props.vision ? '0' : '1'}}>\n          <div className=\"task-title all-center\">\n            <h2>Добавить задачу</h2>\n            <Button onPress={this.props.name} value='Добавить задачу' classNames='button'/>\n            <input placeholder='НАЗВАНИЕ' value={this.props.valu} onChange={this.props.change} className='input-name'/>\n            <textarea placeholder='Описание задачи' className=\"modal-textarea\" value={this.props.val} onChange={this.props.chang}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ModalWindow;","import React, { Component } from 'react';\nimport Button from './button';\n\nclass Task extends Component {\n\n  state = {\n    bool: true,\n    butBool: true\n  }\n\n  clickOnTask = (e) => {\n    this.setState({\n      bool: !this.state.bool\n    });\n  };\n\n  succes = (e) => {\n    this.setState({\n      butBool: !this.state.butBool\n    })\n  }\n  \n  render(){\n    return(\n      <div identy={this.props.identy} onClick={(e) => this.clickOnTask(e)} className={this.state.bool ? 'task all-center h100' : 'task all-center hn'}>\n        <div className=\"task-title all-center\">\n          <h2><span>{this.props.number}</span>) {this.props.taskName}</h2>\n          <Button ident={this.props.identy} classNames={this.state.butBool ? 'button' : 'button succes'} value={this.state.butBool ? 'Done' : `✅`} onPress={e => this.succes(e)}/>\n          <div className=\"description\">\n            <React.Fragment>\n              {this.props.taskDesk}\n            </React.Fragment>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Task;","import React, { Component } from 'react';\nimport Wrap from './components/wrap'\nimport Button from './components/button';\nimport ModalWindow from './components/modal';\nimport Task from './components/task';\n\nclass App extends Component {\n\n  state = {\n    see: false,\n    value: '',\n    value1: '',\n    taskName: [],\n    taskDesk: [],\n    bool: false\n  }\n\n  modalShow = (e) => {\n    this.setState({\n      see: !this.state.see\n    });\n  }\n\n  click = (e) => {\n    let target = e.target;\n    if(target.tagName === 'BUTTON'){\n      this.state.taskName.push(this.state.value1);\n      this.state.taskDesk.push(this.state.value);\n      this.setState({\n        taskName: this.state.taskName,\n        taskDesk: this.state.taskDesk,\n        value: '',\n        value1: ''\n      })\n    }\n    this.modalShow();\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleChange1 = (e) => {\n    this.setState({\n      value1: e.target.value\n    })\n  }\n\n  render() {\n\n    const name = this.state.taskName.map((item,key) => {\n\n      return (\n        <Task identy={key} number={key + 1} taskName={item} taskDesk={this.state.taskDesk[key]} key={key}/> \n      )\n\n    })\n\n    return (\n      <div className=\"container\">\n        <ModalWindow bool={this.state.bool} valu={this.state.value1} change={e => this.handleChange1(e)} chang={e => this.handleChange(e)} val={this.state.value} vision={!this.state.see} name={e => this.click(e)}/>\n        <Wrap contents={name} vision={this.state.see}/>\n        <Button value='+' classNames='button add-button' onPress={e => this.modalShow(e)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}